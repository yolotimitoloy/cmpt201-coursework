#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/wait.h>
#include <signal.h>

#define MAX_INPUT 1024
#define MAX_ARGS 100

// Handler to ignore Ctrl+C in the shell
void sigint_handler(int sig) {
    printf("\nShell> ");
    fflush(stdout);
}

int main() {
    char input[MAX_INPUT];
    char *args[MAX_ARGS];
    pid_t pid;
    int status;

    // Ignore SIGINT (Ctrl+C)
    signal(SIGINT, sigint_handler);

    while (1) {
        // Print shell prompt
        printf("Shell> ");
        fflush(stdout);

        // Get input
        if (!fgets(input, sizeof(input), stdin)) {
            break; // EOF
        }

        // Remove newline
        input[strcspn(input, "\n")] = 0;

        // Skip empty input
        if (strlen(input) == 0) continue;

        // Tokenize input into args
        int i = 0;
        char *token = strtok(input, " ");
        while (token != NULL && i < MAX_ARGS - 1) {
            args[i++] = token;
            token = strtok(NULL, " ");
        }
        args[i] = NULL;

        // Check if last argument is "&"
        int background = 0;
        if (i > 0 && strcmp(args[i-1], "&") == 0) {
            background = 1;
            args[i-1] = NULL; // Remove & from args
        }

        // Fork a child process
        pid = fork();
        if (pid < 0) {
            perror("fork failed");
            continue;
        } else if (pid == 0) {
            // Child process: restore default Ctrl+C behavior
            signal(SIGINT, SIG_DFL);
            if (execvp(args[0], args) < 0) {
                perror("exec failed");
                exit(1);
            }
        } else {
            // Parent process
            if (!background) {
                // Wait for foreground process
                waitpid(pid, &status, 0);
            } else {
                // Background process: print PID and continue
                printf("[Background PID %d]\n", pid);
            }
        }
    }

    printf("\nExiting shell...\n");
    return 0;
}


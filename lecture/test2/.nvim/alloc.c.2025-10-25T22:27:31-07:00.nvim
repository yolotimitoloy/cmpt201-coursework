#define _DEFAULT_SOURCE
#include "alloc.h"
#include <stdbool.h>
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

static int limit = 0;
static enum algs algs = FIRST_FIT;
static struct header *head = NULL; // first block (our region)
static void *heap_origin = NULL;   // where heap starts
static void *heap_end = NULL;
static bool deallocCalled = false;

void coalesce_unsorted(struct header *head) {
    struct header *a = head;
    while (a) {
        struct header *b = head;
        while (b) {
            if (a != b &&
                (char *)a + sizeof(struct header) + a->size == (char *)b) {
                a->size += sizeof(struct header) + b->size;
                a->next = b->next;
                b = head; // restart since list changed
                continue;
            }
            b = b->next;
        }
        a = a->next;
    }
}


struct header *get_last(struct header *block) {
  struct header *temp = head;
  struct header *last = NULL;
  while (temp != NULL) {
    if (temp == block) {
      //      printf("get_last returning: %p\n", last);
      return last;
    }
    last = temp;
    temp = temp->next;
  }
  return NULL;
}

struct header *find_first_fit(struct header *free_list_ptr, uint64_t size) {
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size) {
      return free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return NULL;
}
struct header *get_next(struct header *free_list_ptr, struct header *block) {
  while (free_list_ptr != NULL) {
    if (free_list_ptr == block) {
      return free_list_ptr->next;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return NULL;
}
struct header *find_best_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *best_fit = NULL;
  uint64_t best_fit_size = UINT64_MAX;
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size && free_list_ptr->size < best_fit_size) {
      best_fit_size = free_list_ptr->size;
      best_fit = free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return best_fit;
}
struct header *find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *worst_fit = NULL;
  uint64_t worst_fit_size = 0;
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size && free_list_ptr->size > worst_fit_size) {
      worst_fit_size = free_list_ptr->size;
      worst_fit = free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return worst_fit;
}

void *alloc(int size) {
  if (deallocCalled == false) {
    if (head == NULL) {
      void *mem = sbrk(INCREMENT);
      if (mem == (void *)-1) {
        perror("sbrk failed");
        return NULL;
      }

      heap_origin = mem;
      heap_end = sbrk(0); // current program break (end of heap)

      struct header *block = (struct header *)mem;
      block->size = size + sizeof(struct header);
      block->next = NULL;

      struct header *next_block = (struct header *)((char *)(block + 1) + size);
      next_block->size = INCREMENT - sizeof(struct header) * 2 - size;
      next_block->next = NULL;

      head = next_block;

      void *user_ptr = (void *)(block + 1);
      printf("[alloc] allocated %d bytes at %p, next free at %p (free %lu "
             "bytes)\n",
             size, user_ptr, head, head->size);
      return user_ptr;
    }

    if (head->size < (uint64_t)size && heap_end - heap_origin == limit) {
      printf("Out of memory! Requested %d, available %lu\n", size, head->size);
      printf("Out of bound! Reached limit: %d\n", limit);
      return NULL;
    }

    // logic for last space:
    if (head->size > (uint64_t)size &&
        head->size < (uint64_t)size + sizeof(struct header) * 2 &&
        heap_end - heap_origin < limit) {
      printf("Free %lu, requested %d, assigning last block!\n", head->size,
             size);
      struct header *block = head;
      block->size += sizeof(struct header);
      void *user_ptr = (void *)(block + 1);
      head = NULL;
      return user_ptr;
    }

    if (head->size > (uint64_t)size &&
        head->size < (uint64_t)size + sizeof(struct header) &&
        heap_end - heap_origin == limit) {
      printf("Free %lu, requested %d, assigning last block! second one\n",
             head->size, size);
      struct header *block = head;
      void *user_ptr = (void *)(block + 1);
      head = NULL;
      return user_ptr;
    }

    if ((heap_end - heap_origin < limit && head->size < size) ||
        (heap_end - heap_origin < limit && head->size >= size &&
         head->size < size + sizeof(struct header))) {
      printf("Free %lu, requested %d, under limit, increasing size!\n",
             head->size, size);
      void *res = sbrk(INCREMENT);
      if (res == (void *)-1) {
        perror("sbrk failed");
        return NULL;
      }
      heap_end = sbrk(0);
      head->size += INCREMENT;
    }
    struct header *block = head;
    struct header *next_block = (struct header *)((char *)(block + 1) + size);
    next_block->size = block->size - size - sizeof(struct header);
    next_block->next = NULL;
    block->size = size + sizeof(struct header);
    void *user_ptr = (void *)(block + 1);
    head = next_block;
    if (head->size == 0) {
      printf(
          "head size is 0, no free space ahead. letting last block get 16.\n");
      block->size += sizeof(struct header);
      head = (void *)(next_block + 1);
    }
    printf("[alloc] allocated %d bytes at %p, next free at %p (free %lu "
           "bytes)\n",
           size, user_ptr, head, head->size);

    return user_ptr;
  } else {
    struct header *block = head;
    struct header *temp = NULL;
    switch (algs) {
    case FIRST_FIT:
      temp = find_first_fit(block, size + sizeof(struct header));
      break;
    case BEST_FIT:
      temp = find_best_fit(block, size + sizeof(struct header));
      break;
    case WORST_FIT:
      temp = find_worst_fit(block, size + sizeof(struct header));
      break;
    }

    struct header *next_block = get_next(block, temp);
    struct header *new_block = (struct header *)((char *)(temp + 1) + size);
    if (temp->size < size + sizeof(struct header)) {
      void *user_ptr = (void *)(temp + 1);
      head = next_block;
      // printf("[alloc] same block: allocated %d bytes at %p\n", size,
      // user_ptr);
      return user_ptr;
    } else {
      new_block->size = temp->size - size - sizeof(struct header);
      new_block->next = next_block;
      temp->size = size + sizeof(struct header);
      void *user_ptr = (void *)(temp + 1);
      if (temp == head) {
        head = new_block;
      } else {
        struct header *last = get_last(temp);
        last->next = new_block;
      }
      // printf("[alloc] else, allocated %d bytes at %p\n", size, user_ptr);
      return user_ptr;
    }
  }
}

void dealloc(void *header) {
  if (!header)
    return;
  deallocCalled = true;
  struct header *block = (struct header *)header - 1;
  uint64_t size = block->size - sizeof(struct header);
  block->next = head;
  head = block;
  printf("[dealloc] freed block, new head at %p, next block=%p, size=%lu\n",
         block, block->next, size);
  coalesce_unsorted(head);
  /*
  bool merged;
  do {
    merged = false;
    struct header *temp = head;
    struct header *last = NULL;

    while (temp != NULL) {
      // Forward merge
      if (temp->next != NULL &&
          (char *)temp + sizeof(struct header) + temp->size ==
              (char *)temp->next) {
        printf("[coalesce] Merging forward: %p(size=%lu) + %p(size=%lu)\n",
               temp, temp->size, temp->next, temp->next->size);

        temp->size += sizeof(struct header) + temp->next->size;
        temp->next = temp->next->next;
        merged = true;
      }

      if (last != NULL &&
          (char *)temp + sizeof(struct header) + temp->size == (char *)last) {
        printf("[coalesce] Merging forward: %p(size=%lu) + %p(size=%lu)\n",
               temp, temp->size, last, last->size);

        temp->size += sizeof(struct header) + last->size;
        if (head == last) {
          head = temp;
        }
        if (head->next != NULL) {
          if (head->next->size == 0 &&
              (char *)head + sizeof(struct header) + head->size ==
                  (char *)head->next) {
            head->size += sizeof(struct header);
            head->next = NULL;
          }
        }
        last = temp;
        merged = true;
      }
      last = temp;
      temp = temp->next;
    }
  } while (merged);
  */
}

void printinfo() {
  struct header *block = head;
  while (block != NULL) {
    printf("[printinfo] block: %p, block size: %lu, block next: %p\n", block,
           block->size, block->next);
    block = block->next;
  }
}

void resetalloc() {
  if (heap_origin == NULL)
    return;
  // printf("resetting\n");
  void *current = sbrk(0);
  intptr_t diff = (char *)current - (char *)heap_origin;

  if (diff > 0)
    sbrk(-diff); // shrink heap back
  limit = 0;
  heap_origin = NULL;
  heap_end = NULL;
  head = NULL;
  deallocCalled = false;
}

/* --- allocopt(): create one big allocatable region ---
void allocopt(enum algs algopt, int size) {
  resetalloc(); // clean any previous region
  algs = algopt;
  heap_origin = sbrk(0);
  limit = size;
  head = heap_origin;
}
*/
void allocopt(enum algs algopt, int size) {

  resetalloc();
  algs = algopt;
  heap_origin = sbrk(0);
  limit = size;
  /*
  struct header *block = sbrk(size);
  block->size = size - sizeof(struct header);
  block->next = NULL;
  head = block;
  */
  heap_end = (char *)heap_origin + size;
  // printf("[allocopt] heap_origin=%p heap_end=%p head=%p\n", heap_origin,
  //      heap_end, head);
}

struct allocinfo allocinfo() {
  uint64_t temp = 0;
  uint64_t max = 0;
  uint64_t min = UINT64_MAX;
  uint64_t count = 0;
  struct header *free = head;
  while (free != NULL) {
    count++;
    temp += free->size;
    if (free->size < min) {
      min = free->size;
    }
    if (free->size > max) {
      max = free->size;
    }
    free = free->next;
  }
  if (temp == 0) {
    min = temp;
  }
  if (temp == limit) {
    temp -= sizeof(struct header);
  }
  struct allocinfo info;
  info.free_size = temp;
  info.free_chunks = count;
  info.largest_free_chunk_size = max;
  info.smallest_free_chunk_size = min;
  return info;
}

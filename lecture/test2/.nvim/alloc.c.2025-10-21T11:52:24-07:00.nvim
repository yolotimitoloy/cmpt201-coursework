#define _DEFAULT_SOURCE
#include "alloc.h"
#include <stddef.h>
#include <stdint.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <unistd.h>

static struct header *head = NULL;
static void *heap_origin = NULL;
static enum algs algs = FIRST_FIT;

struct header *get_last(struct header *free_list_ptr, struct header *block) {
  struct header *last = NULL;
  while (free_list_ptr != NULL) {
    if (free_list_ptr == block) {
      return last;
    }
    last = free_list_ptr;
    free_list_ptr = free_list_ptr->next;
  }
  return NULL;
}

struct header *find_first_fit(struct header *free_list_ptr, uint64_t size) {
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size) {
      return free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return NULL;
}
struct header *get_next(struct header *free_list_ptr, struct header *block) {
  while (free_list_ptr != NULL) {
    if (free_list_ptr == block) {
      return free_list_ptr->next;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return NULL;
}
struct header *find_best_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *best_fit = NULL;
  uint64_t best_fit_size = UINT64_MAX;
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size && free_list_ptr->size < best_fit_size) {
      best_fit_size = free_list_ptr->size;
      best_fit = free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return best_fit;
}
struct header *find_worst_fit(struct header *free_list_ptr, uint64_t size) {
  struct header *worst_fit = NULL;
  uint64_t worst_fit_size = 0;
  while (free_list_ptr != NULL) {
    if (free_list_ptr->size >= size && free_list_ptr->size > worst_fit_size) {
      worst_fit_size = free_list_ptr->size;
      worst_fit = free_list_ptr;
    }
    free_list_ptr = free_list_ptr->next;
  }
  return worst_fit;
}

void *alloc(int size) {
    struct header *block = head;

    // Check if it fits in the current block
    if (block->size < size) {
        printf("Out of memory\n");
        return NULL;
    }

    // Split block into [allocated part] + [remaining free part]
    struct header *next_block = (struct header *)((char *)(block + 1) + size);

    next_block->size = block->size - size - sizeof(struct header);
    next_block->next = NULL;

    void *user_ptr = (void *)(block + 1); // memory right after header

    head = next_block; // next allocation will start from the next block

    return user_ptr;
}

/*
void *alloc(int size) {
  if (heap_origin == NULL) {
    heap_origin = sbrk(0); // mark where the heap currently begins
    head = heap_origin;
  }

  if (head->size > size){
    
  }


  void *block_start = sbrk(sizeof(struct header) + size);
  if (block_start == (void *)-1) {
    perror("sbrk failed");
    return NULL;
  }

  struct header *hdr = (struct header *)block_start;
  hdr->size = size;
  hdr->next = NULL;

  void *user_ptr = (void *)(hdr + 1);
  printf("Allocated header at %p, payload at %p, break now %p\n", (void *)hdr,
         user_ptr, sbrk(0));

  head = sbrk(0); // update head to top of heap
  return user_ptr;
}*/
/* struct header *block = heap_origin;
 struct header *block2 = NULL;
 struct header *nextBlock = NULL;
 struct header *newBlock = NULL;
 switch(algs){
   case FIRST_FIT:
     block2 = find_first_fit(block, size);
     break;
   case BEST_FIT:
     block2 = find_best_fit(block, size);
     break;
   case WORST_FIT:
     block2 = find_worst_fit(block, size);
     break;
 }
 nextBlock = get_next(block,block2);

 if (block2) {
    block2 = sbrk(sizeof(struct header) + size);
    if (block2 == (void*)-1){
        return NULL;
    }
    newBlock->size = block2->size - sizeof(struct header) + size;
    newBlock->next = nextBlock;
    block2->size = sizeof(struct header) + size;
    block2->next = newBlock;
    memset(block2 + 1, 1, size);
 }
 return block2 + 1;
 */

void dealloc(void *header) {}

void resetalloc() {
  if (heap_origin == NULL)
    return;
  void *current = sbrk(0);
  intptr_t diff = (char *)current - (char *)heap_origin;
  if (diff > 0)
    sbrk(-diff);
  printf("%p\n%p\n", current, sbrk(0));
}

void allocopt(enum algs algsopt, int size) {
  resetalloc();
  heap_origin = sbrk(0);
  algs = algsopt;
  struct header *block = sbrk(size);
  block->size = size - sizeof(struct header);
  block->next = NULL;
  head = block;
}

struct allocinfo allocinfo();
